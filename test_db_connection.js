const sql = require('mssql/msnodesqlv8');

const config = {
    server: 'localhost\\SQLEXPRESS',
    database: 'premium_auto',
    driver: 'msnodesqlv8',
    options: {
        trustedConnection: true,
        trustServerCertificate: true,
        enableArithAbort: true
    }
};

async function testConnection() {
    let pool;
    try {
        console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', JSON.stringify(config, null, 2));
        console.log('\n–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        pool = await new sql.ConnectionPool(config).connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—É–ª—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        const result = await pool.request().query('SELECT COUNT(*) as count FROM cars');
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –±–∞–∑–µ: ${result.recordset[0].count}`);

        const tables = ['cars', 'brands', 'car_models', 'customers', 'orders', 'services'];
        console.log('\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:');
        
        for (const table of tables) {
            try {
                const tableResult = await pool.request()
                    .input('tableName', sql.VarChar, table)
                    .query(`
                        SELECT COUNT(*) as count 
                        FROM INFORMATION_SCHEMA.TABLES 
                        WHERE TABLE_NAME = @tableName
                    `);
                
                const exists = tableResult.recordset[0].count > 0;
                console.log(`${exists ? '‚úÖ' : '‚ùå'} –¢–∞–±–ª–∏—Ü–∞ ${table}: ${exists ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);

                if (exists) {
                    const countResult = await pool.request()
                        .query(`SELECT COUNT(*) as count FROM ${table}`);
                    console.log(`   ‚îî‚îÄ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${countResult.recordset[0].count}`);
                }
            } catch (err) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã ${table}:`);
                console.log(`   ‚îî‚îÄ ${err.message}`);
            }
        }

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
        console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', err.message);
        if (err.code) console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', err.code);
        if (err.originalError) console.error('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err.originalError);
        console.error('\n–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:', err);
    } finally {
        if (pool) {
            try {
                await pool.close();
                console.log('\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
            } catch (err) {
                console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', err.message);
            }
        }
        try {
            await sql.close();
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', err.message);
        }
    }
}

console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
testConnection(); 